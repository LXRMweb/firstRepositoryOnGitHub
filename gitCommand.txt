（一、第一部分）
pwd显示当前所在目录
ls -ah显示当前文件夹下所有文件以及子目录
cd d:/git进入到某个目录
mkdir changkongProject在当前目录下创建一个子目录
git init将当前所在目录变成一个资源库（repository），之后这个文件夹下所有资源都可以被git管理
git status查看git资源库有什么变动（如添加或删除了什么文件，什么文件被改动了）
git diff readme.txt查看readme.txt文件哪些地方被改动了（白色是未变的，红色是原先的，绿色是改动后的）
		（看的是工作区一个文件和版本库(也即分支)中该文件最新版本之间的区别）
git add readme.txt添加该文件到git资源库，使得git可以进一步管理它
git commit -m "描述"
git log查看最近三次的commit操作（即查看commit历史）
git log --pretty=oneline该参数简化显示的内容，使其只显示一行
git reflog(查看命令历史，最近都使用了哪些git命令)
git reset --hard HEAD^恢复文件为之前的版本
git reset --hard HEAD~100
git reset --hard HEAD 21356rts(这串数字是commit id中的一部分)
（二、第二部分）
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
git checkout -- readme.txt
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
git reset HEAD readme.txt
git checkout -- readme.txt
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考"版本回退"一节，不过前提是没有推送到远程库。
git reset HEAD^
或者 git reset HEAD^^
或者 git reset HEAD~10
或者 git reset HEAD 234gh(commit id号的一部分)
（三、第三部分，操作git官网远程仓库）
3.1将本地仓库myFirstGitRepository与GitHub官网远程仓库相关联
	step1：进入本地仓库文件夹
		cd d:/git/myFirstGitRepository/
	step2: 执行以下命令，让step1文件夹下的本地仓库和github官网上自己建立的某个仓库相关联
	 	git remote add origin git@github.com:LXRMweb/firstRepositoryOnGitHub.git
					   	  [LXRMweb是账号]   [远程仓库名称(gitHub官网上建立的仓库名称)]
	step3：执行以下命令，将本地仓库master分支中的所有内容推送到github官网的远程仓库中
		git push -u origin master
	step4：经历了step1-step3之后，可以看到github官网上的仓库和本地的版本仓库已经一致了
	step5：本地仓库又提交了新的东西之后，直接使用以下命令将master分支的最新修改提交到远程仓库
		git push origin master
		git push origin branchName//也可以向远程仓库推送除了master之外的其他分支
		git push 远程仓库名称 branchName//远程仓库的默认名称是origin


3.2 git clone git@github.com:LXRMweb/远程仓库名称.git

3.3 git remote查看远程仓库信息
	git remote -v

（四、第四部分，管理仓库分支）
git branch branchName创建新分支
git checkout branchName跳转到相应分支
git checkout -b branchName创建并跳转到相应分支
git branch查看当前分支
（拓：可以在分支上添加文件...）
（拓：等分支上将一个模块的任务完全完成之后，就可以使用如下命令将该分支上的东西与master分支合并）
git checkout master先跳转到master分支，使得当前分支是master
git merge branchName合并目的分支到“当前分支”（例如：当前分支是master时，该命令会将branchName分支合并到master分支上
					再如：当前分支是“secondBranch”时，则会将branchName合并到“secondBranch”分支上
					该命令默认使用FastForward合并模式，可以使用如下参数禁用FastForward模式）
	
（（（git merge --no-ff -m "commit描述" branchName（使用参数禁用FastForward合并模式）

（拓：该分支上的功能全部完成且已经将工作成果合并到主分支或其他分支之后，就可以将该分支删除了，使用如下命令）
git branch -d branchName删除对应的分支
git log --graph 查看分支合并图
（拓：使用分支进行开发，merge时可能会发生冲突，这种情况下使用git merge <branchName>命令就会报错
	$ git merge test2
	Auto-merging aboutFirstBranch.txt
	CONFLICT (content): Merge conflict in aboutFirstBranch.txt
	Automatic merge failed; fix conflicts and then commit the result.

	从git bash界面报错信息可知，两个分支的冲突出现在aboutFirstBranch.txt文件，所以解决冲突的办法就是直接打开该文件，将冲突的地	方稍加修改，然后再用
	git add "冲突的文件"
	git commit -m "描述"
	git merge <branchName>即可）
（拓：分支管理策略
	一般情况下团队开发时，每个人都拥有自己的分支，自己的模块开发好之后，合并到“Dev分支上”，所有人都将工作提交至Dev分支之后，将	软件的整体测试版本发到master分支，即个人分支---dev分支---master分支）
（拓：bug分支
	情景再现：你正做着自己的工作，但是老板突然甩过来一个bug让你修复，告诉你可以先放下手头的工作，修复这个bug的任务比较急
	你的动作：step1，先将自己的工作保存到一下，
			git stash保存工作现场
		step2,创建一个分支，专门用于修复bug
			git checkout -b bug1
		step3,修改有bug的文件。。。。
		step4,将改好bug后的文件保存并提交至bug分支
			git add...
			git commit -m ""
		step5,将"bug分支"合并到目的分支，完成老板交代的任务
			git checkout 目的分支
			git merge --no-ff -m "修改bug-001" bug1    
			git branch -d bug1删除bug分支）
		step6：经过step5之后，老板交代的修复bug的任务就算是完成了，那么现在可以继续自己原本的工作了
			git checkout 自己的工作所在的分支
			git stash list查看自己刚才的工作现场保存到哪里去了
			git stash apply恢复工作现场，但是stash内容并不删除
			git stash apply stash@{0}恢复指定的stash
			git stash pop恢复工作现场，恢复的同时把stash内容也删了
git branch -d branchName删除分支
git branch -D branchName强行删除一个没有被合并过的分支（也就是说“直接丢弃”该分支上所添加或修改的东西）
（拓：多人协作
	查看远程库信息，使用git remote -v；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败(则说明远程仓库的内容比本地版本库的内容还新)，先用git pull抓     取远程的新提交；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突；
	处理完冲突之后，可以再次git push origin branchName
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；	
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	）

（五、第五部分 标签管理）
5.1 什么是标签
	正常情况下每一个commit对应一个commit id，该id是一串字符串，看起来非常复杂，tag相当于是给每个commit起一个别名
	每一个tag对应于一次commit
5.2相关命令
git tag查看所有标签
git tag  tagName//给现在所在的分支的最新的一个commit添加标签
git tag    v1.0     78yd56
      	[标签名称] [commit id号]
git tag -a v1.0 -m "version 1.0 released" 78yd56//可以给标签添加描述信息
git tag -s <tagname> -m "blablabla..."//可以用PGP签名标签；
git show <tagName>查看你某个标签的具体信息
git tag -d tagName删除某个标签
git push origin tagName将本地某个标签推送到远程
git push origin --tags一次性推送全部尚未推送到远程的本地标签
（拓：若是标签已经推送到远程，要删除远程标签就会相对麻烦
	step1：先从本地删除相应标签
		git tag -d tagName
	step2:删除远程相应标签
		git push origin :ref/tags/tagName
	step3:登录远程仓库，查看相应标签是否已从远程仓库删除）



（拓：使用git参与一项开源项目
	step1：如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页					https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，
	step2:然后，从自己的账号下clone：
		git clone git@github.com:michaelliao/bootstrap.git
		一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址				git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。
	step3：如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。
		如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull 				request就不一定了。）

（拓：.gitignore
	git add -f App.class//由于.gitignore文件的存在，导致App.class无法推送到版本库，使用-f参数就可以强制添加App.class到版本仓	库，而不用受.gitignore的限制
	git check-ignore -v App.class//检查出到底是因为.gitignore中哪条规则的问题，使得App.class无法被推送到版本库）

（拓：git命令别名
	git config --global alias.st status
	git config --global alias.unstage 'reset HEAD'
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
		--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用；
		配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。。）
			
	
